library(visdat)
library(MASS) # for the forward, backward and bidirectional search
libary(mice)
install.packages('mice')
libary(foreign)
install.packages('foreign')
library(car)
install.packages('car')
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(dplyr)
library(mice)
library(foreign) # to import Stata DTA files
library(car)     # for recode
# import ANES dataset
anesimp = read.dta("anesimputation.dta",
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(dplyr)
library(mice)
library(foreign) # to import Stata DTA files
library(car)     # for recode
set.seed(145)
# import ANES dataset
anesimp = read.dta("anesimputation.dta",
convert.factors = FALSE, missing.type = TRUE)
library(dplyr)
library(mice)
library(foreign) # to import Stata DTA files
library(car)     # for recode
set.seed(145)
# import ANES dataset
anesimp = read.dta("anesimputation.dta",
convert.factors = FALSE, missing.type = TRUE)
# import ANES dataset
anesimp = read.dta("anesimputation.dta",
convert.factors = FALSE, missing.type = TRUE)
lm(data)
summary(lm(fatalities ~ seatbelt, data = data))
c(1, 0, 0, 0, 1)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(GGally) # for the ggpairs() function
library(tidyverse) # for dplyr and ggplot()
library(visdat) # visualising NA's
library(MASS) # for the forward, backward and bidirectional search
# get vector that has a row with NA
rows_with_na = apply(is.na(data), 1, sum)
rows_with_na
!rows_with_na
# get vector that has a row with NA
rows_with_na = apply(is.na(data), 1, sum)
data.noNa = data[!rows_with_na, ]
data.noNa
nrow(data)
523 - 128
sum(apply(is.na(data), 1, sum))
nrow(data.noNa)
head(data.noNa)
head(data)
data[1, 1] = 'baaa'
data[1, 1] = as.factor('baaa')
data %>% head(. , 2)
data.noNa
data.noNa %>% head(. , 2)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(GGally) # for the ggpairs() function
library(tidyverse) # for dplyr and ggplot()
library(visdat) # visualising NA's
library(MASS) # for the forward, backward and bidirectional search
# a quick look at the data and it's columns
data = read.csv("../data/seatbelt_group_14.csv", header = TRUE, stringsAsFactors = TRUE)
names(data)
vis_dat(data)
str(data)
# obtain the percentage of missing data in the seatbelt variable
n_missing = sum(apply(is.na(data), 1, sum))
prop_n_missing = n_missing/nrow(data)
# a temporary data frame, made to observe the NA's specifically across each state at each year
temp = data %>%
dplyr::select(state, year, seatbelt) %>%
group_by(year) %>%
arrange(year) %>%
arrange(state)
# for the NA's replace them with zeroes
temp = temp %>% mutate(seatbelt.no.na = case_when(is.na(seatbelt) ~ 0, TRUE ~ seatbelt))
# define function for below
every_nth = function(n) {
return(function(x) {x[c(TRUE, rep(FALSE, n - 1))]})
}
# observe the plot of NA's by year and state
temp %>% ggplot(. , aes(x = factor(year), y = seatbelt.no.na)) +
geom_point() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_x_discrete(breaks = every_nth(n = 3)) +
xlab('year') +
ylab('self reported seatbelt proportions') +
facet_wrap(~state) +
ggtitle("seatbelt proportions by year for each state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data %>%
dplyr::select(state, fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
facet_wrap(~state) +
ggtitle("distribution of fatalities by state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data %>%
dplyr::select(fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
ggtitle("fatalities distribution for all observations") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data %>%
dplyr::select(-state) %>%
ggpairs()
# get vector that has a row with NA
rows_with_na = apply(is.na(data), 1, sum)
data.noNa = data[!rows_with_na, ]
data %>% head(. , 2)
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
data = data_raw %>% mutate(state = case_when(
state %in% group1 ~ as.factor('group1'),
state %in% group2 ~ as.factor('group2'),
state %in% group3 ~ as.factor('group3'),
state %in% group4 ~ as.factor('group4'),
state %in% group5 ~ as.factor('group5')))
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(GGally) # for the ggpairs() function
library(tidyverse) # for dplyr and ggplot()
library(visdat) # visualising NA's
library(MASS) # for the forward, backward and bidirectional search
# a quick look at the data and it's columns
data_raw = read.csv("../data/seatbelt_group_14.csv", header = TRUE, stringsAsFactors = TRUE)
names(data_raw)
vis_dat(data_raw)
str(data_raw)
# obtain the percentage of missing data in the seatbelt variable
n_missing = sum(apply(is.na(data_raw), 1, sum))
prop_n_missing = n_missing/nrow(data_raw)
# a temporary data frame, made to observe the NA's specifically across each state at each year
temp = data_raw %>%
dplyr::select(state, year, seatbelt) %>%
group_by(year) %>%
arrange(year) %>%
arrange(state)
# for the NA's replace them with zeroes
temp = temp %>% mutate(seatbelt.no.na = case_when(is.na(seatbelt) ~ 0, TRUE ~ seatbelt))
# define function for below
every_nth = function(n) {
return(function(x) {x[c(TRUE, rep(FALSE, n - 1))]})
}
# observe the plot of NA's by year and state
temp %>% ggplot(. , aes(x = factor(year), y = seatbelt.no.na)) +
geom_point() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_x_discrete(breaks = every_nth(n = 3)) +
xlab('year') +
ylab('self reported seatbelt proportions') +
facet_wrap(~state) +
ggtitle("seatbelt proportions by year for each state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data_raw %>%
dplyr::select(state, fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
facet_wrap(~state) +
ggtitle("distribution of fatalities by state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data_raw %>%
dplyr::select(fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
ggtitle("fatalities distribution for all observations") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
data = data_raw %>% mutate(state = case_when(
state %in% group1 ~ as.factor('group1'),
state %in% group2 ~ as.factor('group2'),
state %in% group3 ~ as.factor('group3'),
state %in% group4 ~ as.factor('group4'),
state %in% group5 ~ as.factor('group5')))
data_raw %>%
dplyr::select(-state) %>%
ggpairs()
# get vector that has a row with NA
rows_with_na = apply(is.na(data), 1, sum)
data.noNa = data[!rows_with_na, ]
# TODO: do data imputation
data.noSeatbelt = data %>% select(-seatbelt)
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
error = FALSE,
message = FALSE)
library(GGally) # for the ggpairs() function
library(tidyverse) # for dplyr and ggplot()
library(visdat) # visualising NA's
library(MASS) # for the forward, backward and bidirectional search
# a quick look at the data and it's columns
data_raw = read.csv("../data/seatbelt_group_14.csv", header = TRUE, stringsAsFactors = TRUE)
names(data_raw)
vis_dat(data_raw)
str(data_raw)
# obtain the percentage of missing data in the seatbelt variable
n_missing = sum(apply(is.na(data_raw), 1, sum))
prop_n_missing = n_missing/nrow(data_raw)
# a temporary data frame, made to observe the NA's specifically across each state at each year
temp = data_raw %>%
dplyr::select(state, year, seatbelt) %>%
group_by(year) %>%
arrange(year) %>%
arrange(state)
# for the NA's replace them with zeroes
temp = temp %>% mutate(seatbelt.no.na = case_when(is.na(seatbelt) ~ 0, TRUE ~ seatbelt))
# define function for below
every_nth = function(n) {
return(function(x) {x[c(TRUE, rep(FALSE, n - 1))]})
}
# observe the plot of NA's by year and state
temp %>% ggplot(. , aes(x = factor(year), y = seatbelt.no.na)) +
geom_point() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
scale_x_discrete(breaks = every_nth(n = 3)) +
xlab('year') +
ylab('self reported seatbelt proportions') +
facet_wrap(~state) +
ggtitle("seatbelt proportions by year for each state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data_raw %>%
dplyr::select(state, fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
facet_wrap(~state) +
ggtitle("distribution of fatalities by state") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
data_raw %>%
dplyr::select(fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
ggtitle("fatalities distribution for all observations") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
data = data_raw %>% mutate(state = case_when(
state %in% group1 ~ as.factor('group1'),
state %in% group2 ~ as.factor('group2'),
state %in% group3 ~ as.factor('group3'),
state %in% group4 ~ as.factor('group4'),
state %in% group5 ~ as.factor('group5')))
data %>% head(. , 4)
data_raw %>%
dplyr::select(-state) %>%
ggpairs()
# get vector that has a row with NA
rows_with_na = apply(is.na(data), 1, sum)
data.noNa = data[!rows_with_na, ]
# TODO: do data imputation
data %>% head(. , 4)
data_raw %>% head( . , 3)
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
data = data_raw %>% mutate(state = case_when(
as.character(state) %in% group1 ~ as.factor('group1'),
as.character(state) %in% group2 ~ as.factor('group2'),
as.character(state) %in% group3 ~ as.factor('group3'),
as.character(state) %in% group4 ~ as.factor('group4'),
as.character(state) %in% group5 ~ as.factor('group5')))
data %>% head(. , 4)
data %>% head(. , 3)
data %>% head()
data %>% head(. , 30)
data = data_raw %>% mutate(state = case_when(
as.character(state) %in% group1 ~ as.factor('group1'),
as.character(state) %in% group2 ~ as.factor('group2'),
as.character(state) %in% group3 ~ as.factor('group3'),
as.character(state) %in% group4 ~ as.factor('group4'),
as.character(state) %in% group5 ~ as.factor('group5'),
TRUE ~ as.factor('hello')))
data %>% head(. , 4)
temp = data_raw %>% mutate(new_state = case_when(
as.character(state) %in% group1 ~ as.factor('group1'),
TRUE ~ as.factor('hello')))
as.factor(group1)
as.factor(group1)[1]
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
data = data_raw %>% mutate(state = case_when(
state %in% as.factor(group1) ~ as.factor('group1'),
state %in% as.fractor(group2) ~ as.factor('group2'),
state %in% as.fractor(group3) ~ as.factor('group3'),
state %in% as.fractor(group4) ~ as.factor('group4'),
state %in% as.fractor(group5) ~ as.factor('group5'),
TRUE ~ as.factor('hello')))
data = data_raw %>% mutate(state = case_when(
state %in% as.factor(group1) ~ as.factor('group1'),
state %in% as.factor(group2) ~ as.factor('group2'),
state %in% as.factor(group3) ~ as.factor('group3'),
state %in% as.factor(group4) ~ as.factor('group4'),
state %in% as.factor(group5) ~ as.factor('group5'),
TRUE ~ as.factor('hello')))
data %>% head(. , 4)
head(data_raw)
group1 = c('ME', 'NH', 'MA', 'CT', 'NY', 'NJ', 'DE', 'MD', 'DC')
group2 = c('MN', 'MI', 'IA', 'IL', 'IN', 'MO', 'KY')
group3 = c('AR', 'LA', 'MS', 'AL', 'GA', 'FL', 'NC')
group4 = c('ID', 'MT', 'ND', 'CO', 'NE', 'KS')
group5 = c('CA', 'NV', 'AZ', 'NM', 'AK', 'HI')
# make a copy of the raw data first
data = data_raw
data$state = as.character(data$state)
str(data)
data = data %>% mutate(state = case_when(
state %in% group1 ~ 'group1',
state %in% group2 ~ 'group2',
state %in% group3 ~ 'group3',
state %in% group4 ~ 'group4',
state %in% group5 ~ 'group5',
TRUE ~ as.factor('hello')))
data = data %>% mutate(state = case_when(
state %in% group1 ~ 'group1',
state %in% group2 ~ 'group2',
state %in% group3 ~ 'group3',
state %in% group4 ~ 'group4',
state %in% group5 ~ 'group5'))
data %>% head(. , 4)
data$state = as.factor(data$state)
data
str(data)
data %>%
dplyr::select(state, fatalities) %>%
ggplot(. , aes(x = fatalities)) +
geom_histogram() +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5)) +
facet_wrap(~state) +
ggtitle("distribution of fatalities by geographic location") +
theme(plot.title = element_text(hjust = 0.5, face = 'bold'))
# full and null model
full_model = lm(fatalities ~ . - seatbelt, data = data)
null_model = lm(fatalities ~ 1, data = data)
n
print(n)
# forward search with AIC and BIC criterion
no_seatbelt_forward_aic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = 2)
# the data set we use for our models
n = nrow(data)
# full and null model
no_seatbelt_full_model = lm(fatalities ~ . - seatbelt, data = data)
no_seatbelt_null_model = lm(fatalities ~ 1, data = data)
# forward search with AIC and BIC criterion
no_seatbelt_forward_aic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = 2)
no_seatbelt_forward_bic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = log(n))
# backward search with AIC and BIC criterion
no_seatbelt_backward_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = 2)
# backward search with AIC and BIC criterion
no_seatbelt_backward_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = 2)
no_seatbelt_backward_bic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = log(n))
# bidirectional search with AIC and BIC criterion
no_seatbelt_bidirectional_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'both',
k = 2)
# forward search with AIC and BIC criterion
no_seatbelt_forward_aic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = 2)
no_seatbelt_forward_bic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = log(n))
# the data set we use for our models
n = nrow(data)
# full and null model
no_seatbelt_full_model = lm(fatalities ~ . - seatbelt, data = data)
no_seatbelt_null_model = lm(fatalities ~ 1, data = data)
# forward search with AIC and BIC criterion
no_seatbelt_forward_aic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = 2)
no_seatbelt_forward_bic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = log(n))
# backward search with AIC and BIC criterion
no_seatbelt_backward_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = 2)
```{r, results = 'hide'}
# the data set we use for our models
no_seatbelt_data = data %>% dplyr::select(-seatbelt)
n = nrow(no_seatbelt_data)
# full and null model
no_seatbelt_full_model = lm(fatalities ~ . - seatbelt, data = no_seatbelt_data)
no_seatbelt_null_model = lm(fatalities ~ 1, data = no_seatbelt_data)
# the data set we use for our models
no_seatbelt_data = data %>% dplyr::select(-seatbelt)
n = nrow(no_seatbelt_data)
# full and null model
no_seatbelt_full_model = lm(fatalities ~ . , data = no_seatbelt_data)
no_seatbelt_null_model = lm(fatalities ~ 1, data = no_seatbelt_data)
# forward search with AIC and BIC criterion
no_seatbelt_forward_aic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = 2)
no_seatbelt_forward_bic = stepAIC(no_seatbelt_null_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'forward',
k = log(n))
# backward search with AIC and BIC criterion
no_seatbelt_backward_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = 2)
no_seatbelt_backward_bic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'backward',
k = log(n))
# bidirectional search with AIC and BIC criterion
no_seatbelt_bidirectional_aic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'both',
k = 2)
no_seatbelt_bidirectional_bic = stepAIC(no_seatbelt_full_model,
scope = list(upper = formula(no_seatbelt_full_model),
lower = formula(no_seatbelt_null_model)),
direction = 'both',
k = log(n))
- **no seatbelt forward aic** : `r formula(no_seatbelt_forward_aic)`
- **no seatbelt forward bic** : `r formula(no_seatbelt_forward_aic)`
- **no seatbelt backward aic** : `r formula(no_seatbelt_forward_aic)`
- **no seatbelt backward aic** : `r formula(no_seatbelt_forward_aic)`
- **no seatbelt forward aic** : `r formula(no_seatbelt_forward_aic)`
- **no seatbelt forward aic** : `r formula(no_seatbelt_forward_aic)`
no_seatbelt_forward_aic
formula(no_seatbelt_backward_aic)
library(formula.tools)
install.packages('formula.tools')
library(formula.tools) # for converting formulas to strings
f1 = as.character.formula(formula(no_seatbelt_forward_aic))
library(formula.tools) # for converting formulas to strings
as.character(y~x)
as.character(formula(no_seatbelt_backward_aic))
