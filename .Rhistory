knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.width = 8)
library(GGally)
library(dplyr)
library(visdat)
library(summarytools)
library(tidyr)
library(ggplot2)
library(naniar)
library(DT)
library(usmap)
library(caret)
library(glmnet)
library(kableExtra)
library(patchwork)
library(MASS)
library(latex2exp)
library(formula.tools)
library(corrplot)
library(RColorBrewer)
text_tbl <- data.frame(
Variables = c("state", "year", "miles", "fatalities", "seatbelt", "speed65", "speed70", "drinkage", "alcohol", "income", "age", "enforce"),
"Description of Variables" = c(
"factor indicating US state (abbreviation)",
"factor indicating year",
"millions of traffic miles per year",
"number of fatalities per million of traffic miles (absolute frequencies of fatalities = fatalities times miles)",
"seat belt usage rate, as self-reported by state population surveyed",
"factor. Is there a 65 mile per hour speed limit?",
"factor. Is there a 70 (or higher) mile per hour speed limit?",
"factor. Is there a minimum drinking age of 21 years?",
"factor. Is there a maximum of 0.08 blood alcohol content?",
"median per capita income (in current US dollar)",
"mean age",
'factor indicating seat belt law enforcement ("no", "primary", "secondary")'
),
Characteristics = c("", "", "", "outcome variable", "missing data", "", "", "", "", "", "", "")
)
kbl(text_tbl) %>%
kable_paper(full_width = F) %>%
column_spec(1, bold = T, border_right = T, width = "5em") %>%
column_spec(2, width = "40em") %>%
column_spec(3, border_left = T, width = "8em") %>%
row_spec(4, background = "yellow")
df = read.csv('https://raw.githubusercontent.com/mattshu0410/STAT3022-MLR-Seat-Belt-Laws/master/data/seatbelt_group_14.csv', stringsAsFactors = TRUE)
df %>% dplyr::select(state) %>% unique() %>% count() %>% pull()
data_nona = df %>% drop_na()
df = df %>%
mutate(year = as.factor(year))
vis_dat(df)
df %>%
dplyr::select(state, year) %>%
filter(state == "NY") %>%
arrange(year) %>%
datatable()
df %>%
dplyr::select(state, year, seatbelt) %>%
arrange(state, year) %>%
filter_all(any_vars(is.na(.))) %>%
datatable()
missing_df = df %>%
dplyr::select(state, seatbelt) %>%
group_by(state) %>%
summarise(values = sum(is.na(seatbelt))/n()) %>%
mutate(state = as.character(state))
# Missingness by State
plot_usmap(data = missing_df, color = "red", labels = TRUE) +
scale_fill_continuous(
low = "white",
high = "red",
name = "Missing Proportion"
) +
theme(legend.position = "right") +
labs(
title = ""
)
# Missingness by Year
df %>%
dplyr::select(year, seatbelt) %>%
gg_miss_fct(., fct = year)
#df %>%
#  dplyr::select(-seatbelt, -state) %>%
#  ggpairs()
#
#df
M = cor(df[,sapply(df, is.numeric)] %>% drop_na())
corrplot(M, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
#df[,sapply(df, is.numeric)] %>%
#  qtlcharts::iplotCorr()
g6 <- ggplot(df,
aes(x = speed65,
y = fatalities)) +
geom_violin(fill = "cornflowerblue") +
geom_boxplot(notch = TRUE,
width = .2,
fill = "orange",
outlier.color = "orange",
outlier.size = 2) +
labs(title = "Speed65 vs Fatalities") +
theme_bw()
g7 <- ggplot(df,
aes(x = speed70,
y = fatalities)) +
geom_violin(fill = "cornflowerblue") +
geom_boxplot(notch = TRUE,
width = .2,
fill = "orange",
outlier.color = "orange",
outlier.size = 2) +
labs(title = "Speed70 vs Fatalities") +
theme_bw()
g8 <- ggplot(df,
aes(x = drinkage,
y = fatalities)) +
geom_violin(fill = "cornflowerblue") +
geom_boxplot(notch = TRUE,
width = .2,
fill = "orange",
outlier.color = "orange",
outlier.size = 2) +
labs(title = "Drinkage vs Fatalities") +
theme_bw()
g9 <- ggplot(df,
aes(x = alcohol,
y = fatalities)) +
geom_violin(fill = "cornflowerblue") +
geom_boxplot(notch = TRUE,
width = .2,
fill = "orange",
outlier.color = "orange",
outlier.size = 2) +
labs(title = "Alcohol vs Fatalities") +
theme_bw()
g10 <- ggplot(df,
aes(x = enforce,
y = fatalities)) +
geom_violin(fill = "cornflowerblue") +
geom_boxplot(notch = TRUE,
width = .2,
fill = "orange",
outlier.color = "orange",
outlier.size = 2) +
labs(title = "Enforce vs Fatalities") +
theme_bw()
g6+g7+g8+g9+g10+plot_layout(ncol = 3)
# Boxplots for quantitative variables
df %>%
dplyr::select(age, income, miles, seatbelt) %>%
apply(., 2, scale) %>%
data.frame() %>%
pivot_longer(cols = 1:4,
names_to = "variable",
values_to = "value") %>%
ggplot() +
geom_boxplot() +
aes(x = variable,
y = value) +
theme_bw() +
labs(
title = "Distribution of Normalised Quantitative Variables",
x = "Variables",
y = "Normalised Values"
)
n = nrow(data_nona)
full_mod = lm(fatalities ~ ., data = data_nona)
null_mod = lm(fatalities ~ 1, data = data_nona)
# The AIC criterion models
forward_aic = stepAIC(null_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'forward',
k = 2)
backward_aic = stepAIC(full_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'backward',
k = 2)
bidir_aic = stepAIC(full_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'both',
k = 2)
# The BIC criterion models
forward_bic = stepAIC(null_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'forward',
k = log(n))
backward_bic = stepAIC(full_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'backward',
k = log(n))
bidir_bic = stepAIC(full_mod,
scope = list(upper = formula(full_mod),
lower = formula(null_mod)),
direction = 'both',
k = log(n))
mod1 = lm(fatalities ~ state + year + age + income + miles + seatbelt + speed65 + drinkage, data = data_nona)
library(car)
vif(mod1)
mod2 = lm(fatalities ~ state + year + income + miles, data = data_nona)
library(car)
vif(mod2)
summary(mod1)
anova(lm(fatalities ~ state + year + age + miles + income + seatbelt + speed65 + drinkage, data = data_nona))
# update mod1 to the most updated version
mod1 = lm(fatalities ~ state + year + age + income + miles + seatbelt, data = data_nona)
summary(mod2)
anova(mod2)
ggplot(data = df, mapping = aes(x = income, y = fatalities)) +
geom_point() +
geom_smooth() +
labs(title = 'fatalities vs income') +
theme_bw()
anova(lm(fatalities ~ state + year + age + miles + seatbelt +
income +
I(income^2) +
I(income^3), data = data_nona))
anova(lm(fatalities ~ state + year + age + income + miles*seatbelt, data = data_nona))
mod1 = lm(fatalities ~ state + year + age + income + miles + seatbelt + miles:seatbelt, data = data_nona)
plot(mod1, which = 1)
plot(mod1, which = 2)
plot(mod2, which = 1)
plot(mod2, which = 2)
# number of observations
n = nrow(data_nona)
# create a new column for data frame
data_nona = data_nona %>% mutate(obs_num = 1:n)
# number of coefficients for our model
p = length(mod1$coefficients)
rst_df1 = data.frame(obs_num = 1:n, rst = rstudent(mod1))
# our threshold
threshold = qt(1 - 0.05/(2*n), df = n-p-1, lower.tail = TRUE)
# plot the threshold alongside the residual value of 3
plot(abs(rst_df1$rst), type = 'h', xlab = 'observation number', ylab = 'externally studentized residual')
abline(h = threshold, col = 'red')
abline(h = 3, col = 'blue')
legend(1, 4.4, legend = c('Bon ferroni Threshold'), col = c('red'), lty = 1, cex = 0.8)
# see if the magnitude of any of our studentized residuals are greater than the threshold
rst_df1 %>% filter(abs(rst) > threshold) %>% arrange(desc(abs(rst)))
rst_df1 %>% filter(abs(rst) > 3) %>% arrange(desc(abs(rst)))
influence_measures_1 = influence.measures(mod1)
influence_df_1 = data.frame(obs_num = 1:n, influence_measures_1$infmat, row.names = NULL)
h_bar = p/n
plot(influence_df_1$hat, type = 'h', xlab = 'observation number', ylab = 'hat value')
abline(h = 3*h_bar, col = 'red')
abline(h = 2*h_bar, col = 'blue')
# for the legend
three_h_bar = TeX(r'($3\bar{h}$)')
two_h_bar = TeX(r'($2\bar{h}$)')
legend(1, 0.27, legend = c(three_h_bar, two_h_bar), col = c('red', 'blue'), lty = c(1, 1), cex = c(0.8, 0.8))
# for observations which have leverage greater than 2(average leverage)
influence_df_1 %>% dplyr::select(obs_num, hat) %>% filter(abs(hat) > 2*h_bar) %>% arrange(desc(hat))
# for observations which have leverage greater than 3(average leverage)
influence_df_1 %>% dplyr::select(obs_num, hat) %>% filter(abs(hat) > 3*h_bar) %>% arrange(desc(hat))
data_nona %>% filter(obs_num %in% c(64, 241, 292))
summary(data_nona)
influence_df_1 %>% arrange(desc(abs(dffit))) %>% dplyr::select(obs_num, dffit) %>% head(10)
influence_df_1 %>% arrange(desc(abs(cook.d))) %>% dplyr::select(obs_num, cook.d) %>% head(10)
plot(abs(influence_df_1$cook.d), type = 'h', xlab = 'observation number', ylab = 'cooks distance')
data_nona %>% filter(obs_num %in% c(77, 207))
# number of coefficients for our model
p = length(mod2$coefficients)
rst_df2 = data.frame(obs_num = 1:n, rst = rstudent(mod2))
# our threshold
threshold = qt(1 - 0.05/(2*n), df = n-p-1, lower.tail = TRUE)
# plot the threshold alongside the residual value of 3
plot(abs(rst_df2$rst), type = 'h', xlab = 'observation number', ylab = 'externally studentized residual')
abline(h = threshold, col = 'red')
abline(h = 3, col = 'blue')
legend(1, 4.5, legend = c('Bon ferroni Threshold'), col = c('red'), lty = 1, cex = 0.8)
# see if the magnitude of any of our studentized residuals are greater than the threshold
rst_df2 %>% filter(abs(rst) > threshold) %>% arrange(desc(abs(rst)))
rst_df2 %>% filter(abs(rst) > 3) %>% arrange(desc(abs(rst)))
influence_measures_2 = influence.measures(mod2)
influence_df_2 = data.frame(obs_num = 1:n, influence_measures_2$infmat, row.names = NULL)
h_bar = p/n
plot(influence_df_2$hat, type = 'h', xlab = 'observation number', ylab = 'hat value')
abline(h = 3*h_bar, col = 'red')
abline(h = 2*h_bar, col = 'blue')
# for the legend
three_h_bar = TeX(r'($3\bar{h}$)')
two_h_bar = TeX(r'($2\bar{h}$)')
legend(1, 0.22, legend = c(three_h_bar, two_h_bar), col = c('red', 'blue'), lty = c(1, 1), cex = c(0.8, 0.8))
# for observations which have leverage greater than 2(average leverage)
influence_df_2 %>% dplyr::select(obs_num, hat) %>% filter(abs(hat) > 2*h_bar) %>% arrange(desc(hat))
# for observations which have leverage greater than 3(average leverage)
influence_df_2 %>% dplyr::select(obs_num, hat) %>% filter(abs(hat) > 3*h_bar) %>% arrange(desc(hat))
data_nona %>% filter(obs_num %in% c(64))
summary(data_nona)
influence_df_2 %>% arrange(desc(abs(dffit))) %>% dplyr::select(obs_num, dffit) %>% head(10)
influence_df_2 %>% arrange(desc(abs(cook.d))) %>% dplyr::select(obs_num, cook.d) %>% head(10)
plot(abs(influence_df_2$cook.d), type = 'h', xlab = 'observation number', ylab = 'cooks distance')
data_nona %>% filter(obs_num %in% c(77, 207))
# This function drops NA rows by default
# This function performs repeated k-fold cross validation
cross_validation = function(cvK, n_sim, df, formula){
# Setup CV method
cv_method = trainControl(method = "repeatedcv",
number = cvK,
repeats = n_sim,
returnData = TRUE,
returnResamp = "final")
# Train the model
model = train(formula,
data = df %>% drop_na(), # Drop NA rows
method = "lm",
trControl = cv_method )
return(model)
}
# This function takes two models and names for models and returns CV plot
generate_cv_plot = function(model1, model2, name1, name2) {
# Get the corre
cv1 = model1$resample %>%
mutate(Model = name1)
cv2 = model2$resample %>%
mutate(Model = name2)
rbind(cv1, cv2) %>%
dplyr::select(RMSE, Rsquared, MAE, Model) %>%
group_by(Model) %>%
pivot_longer(., cols = 1:3, names_to = "Metric", values_to = "Value") %>%
ungroup() %>%
ggplot() +
aes(x = Model, y = Value) %>%
geom_boxplot(notch = TRUE) +
facet_wrap(facets = ~Metric, scales = "free") +
theme_bw() +
labs(
x = "Model",
y = "Metric Value",
title = "Evaluation of Out-of-sample Performance",
subtitle = "Repeated (N=10) 5-fold Cross-Validation"
)
}
# Here I calling cross-validation on two separate models
model1 = cross_validation(cvK = 5,
n_sim = 10,
df = df,
formula = fatalities ~ state + year + age + income + miles + seatbelt + miles:seatbelt)
model2 = cross_validation(cvK = 5,
n_sim = 10,
df = df,
formula = fatalities ~ state + year + income + miles)
# Here I generate a cross-validation plot comparing the two models
generate_cv_plot(model1,
model2,
"Large Model",
"Sparse Model")
car::vif(lm(fatalities ~ state + year + income + miles, df))
# Generate a model matrix for covariates
X = df %>% drop_na %>% dplyr::select(state, year, income, miles)
model_matrix = model.matrix(~ state + year + income + miles, X)
# Outcome fatalities
y = df %>% drop_na %>% dplyr::select(fatalities) %>% pull()
# Example of a single model w/ LASSO
model = glmnet(model_matrix,y)
# Performs 10-fold cross validation
cv_model = cv.glmnet(x = model_matrix,
y = y,
# alpha specifies LASSO
alpha = 1,
type.measure='mse'
)
plot(cv_model)
#coef(cv_model, s = "lambda.min")
lambda_opt=cv_model$lambda.min
# Following gives the MSE of the minimum lambda
lasso_MSE = min(cv_model$cvm)
lasso_RMSE = sqrt(lasso_MSE)
# Following calculates CV RMSE for original model
# Setup CV method
cv_method = trainControl(method = "cv",
number = 10,
returnData = TRUE,
returnResamp = "final")
# Train the model
model1 = train(fatalities ~ state + year + miles + income,
data = data_nona, # Drop NA rows
method = "lm",
trControl = cv_method )
original_model = model1$resample %>%
dplyr::select(RMSE) %>%
pull() %>%
mean()
cbind(LASSO = round(lasso_RMSE, 5), Original = round(original_model, 5))
